# This name will appear in the "Actions" tab of your GitHub repository
name: Python Application CI

#
# Controls when the workflow will run
#
on:
  # Triggers the workflow on push events for the "main" branch
  push:
    branches: [ "main" ]
  # Triggers the workflow on pull requests to the "main" branch
  pull_request:
    branches: [ "main" ]

#
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
#
jobs:
  # This job is named "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # A sequence of tasks that will be executed as part of the job
    steps:
      #
      # Step 1: Check-out your repository under $GITHUB_WORKSPACE, so your job can access it
      #
      - name: Checkout repository
        uses: actions/checkout@v3

      #
      # Step 2: Set up the Python environment
      #
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      #
      # Step 3: Install dependencies
      # We use requirements-dev.txt because it includes pytest and flake8
      #
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      #
      # Step 4: Lint code with flake8
      #
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      #
      # Step 5: Run tests with pytest
      #
      - name: Test with pytest
        run: |
          pytest

      #
      # Step 6: Build the Docker image
      # This step just builds the image to ensure the Dockerfile is valid.
      # A future step could be to push this to a registry like Docker Hub or GCR.
      #
      - name: Build Docker image
        run: |
          docker build . --file Dockerfile --tag my-flask-app:$(date +%s)